package gvktools

import (
	"github.com/google/go-cmp/cmp"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
)

// ConvertToUnstructured converts a runtime.Object to an *unstructured.Unstructured
func ConvertToUnstructured(resourceObject runtime.Object) (resource *unstructured.Unstructured) {
	// Check if resourceObject is already an unstructured.Unstructured
	switch unstructuredResource := resourceObject.(type) {
	case *unstructured.Unstructured:
		// If it is, return it
		return unstructuredResource
	default:
		// Convert Deployment object to Unstructured object
		obj, err := runtime.DefaultUnstructuredConverter.ToUnstructured(resourceObject)
		if err != nil {
			return nil
		}
		return &unstructured.Unstructured{Object: obj}
	}
}

// NeedToUpdate returns true if the new object has to be updated.
// This is determined by comparing the old object with the new one.
// The old object is the one currently stored in the cluster, while the new one is the one
// generated by the controller.
// We ignore changes in annotations and labels since they are not part of the resource spec.
func NeedToUpdate(old, new *unstructured.Unstructured) bool {
	if old.GetKind() == "Namespace" {
		return false
	}
	// We need to create copies of the objects because we need to change them.
	// We cannot change the original objects because we need them for later comparisons.
	oldCopy := old.DeepCopy().Object
	newCopy := new.DeepCopy().Object
	// Get the metadata from the copies of the objects.
	oldMetadata := oldCopy["metadata"].(map[string]interface{})
	newMetadata := newCopy["metadata"].(map[string]interface{})
	// Ignore changes in annotations and labels since they are not part of the resource spec.
	if !cmp.Equal(oldMetadata["annotation"], newMetadata["annotation"]) {
		return true
	}
	if !cmp.Equal(oldMetadata["labels"], newMetadata["labels"]) {
		return true
	}
	// Remove the metadata and status from the copies of the objects.
	// We don't want to compare the metadata and the status.
	oldCopy["metadata"] = nil
	newCopy["metadata"] = nil
	oldCopy["status"] = nil
	newCopy["status"] = nil
	// Compare the two copies of the objects.
	return !cmp.Equal(oldCopy, newCopy)
}
